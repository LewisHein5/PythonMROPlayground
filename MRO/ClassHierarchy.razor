@using MRO.Services
@inject IJSRuntime JsRuntime
@inject UpdateService classListUpdateService;
<div @ref="_inheritanceGraph" style="flex: 1"></div>


<ol>
    @if (_linearizationSteps.Any())
    {
        <li><b>L(Object)</b> = Object</li>
    }
    @foreach (var step in _linearizationSteps.AsEnumerable())
    {
        <li>
            <b>L(@step.Class.Name)</b> = @step.Class.Name + merge(@foreach (var classlist in step.ClassesList)
                {
                    <span>
                        [@foreach (var className in classlist)
                        {
                            if (className == classlist.Last())
                            {
                                @($"{className.Name}")
                            }
                            else
                            {
                                @($"{className.Name},")
                            }
                        }]
                    </span>
                })
            <ul class="customBulletList">
                @foreach (var mergeStep in step.MergeSteps)
                {
                    <li class="equalsBullet">
                        [@step.Class.Name,
                        @foreach (var className in mergeStep.MergedClasses)
                        {
                            if (className == mergeStep.MergedClasses.Last())
                            {
                                @($"{className.Name}")
                            }
                            else
                            {
                                @($"{className.Name},")
                            }
                        }]
                        @if (mergeStep.UnmergedClasses.Count > 0)
                        {
                            <span>
                                + merge(<span>@foreach (var classlist in mergeStep.UnmergedClasses)
                                              {
                                                  <span>
                                                      [@foreach (var className in classlist)
                                                       {
                                                           if (className == classlist.Last())
                                                           {
                                                               @($"{className.Name}")
                                                           }
                                                           else
                                                           {
                                                               @($"{className.Name},")
                                                           }
                                                       }]
                                                  </span>
                                              }</span>)
                            </span>
                        }
                    </li>
                }
            </ul>
        </li>
    }
</ol>

@if (_graph != null && _graph.VertexCount > 0)
{
    <b>Linearized order: </b>
    @if (_linearization.Count > 0)
    {
        <ol role="group">
            @foreach (var item in _linearization)
            {
                <li>@item.Name</li>
            }
        </ol>
    }
    else
    {
        <span style="color: red"><b>Linearization is not possible.</b></span>
    }
}


@code {
    private ElementReference _inheritanceGraph;
    private string _selectedPythonClass = "";
    
    protected override async Task OnInitializedAsync()
    {
        const string diagram = "";
        await JsRuntime.InvokeVoidAsync("renderDot", diagram, _inheritanceGraph);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        classListUpdateService.CodeChangedEvent += UpdateGraph;
    }
}