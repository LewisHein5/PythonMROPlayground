@using MRO.Models
@using MRO.Services
@using QuikGraph
@inject IJSRuntime JsRuntime
@inject UpdateService classListUpdateService;
<div @ref="_inheritanceGraph" style="flex: 1"></div>

<ol>
    @foreach (var step in LinearizationSteps.AsEnumerable())
    {
    <li>
        L(@step.Class.Name) = @step.Class.Name + merge(
        @foreach (var classlist in step.ClassesList)
        {
        <span>
                        [
            @foreach (var className in classlist)
            {
            if (className == classlist.Last())
            {
            @($" {className.Name} ")
            }
            else
            {
            @($"{className.Name}, ")
            }
            }
            ]
                    </span>
        }
        )
    </li>
    }
</ol>
@if (Linearization.Count() > 0)
{
    <ol role="status">
        @foreach (var item in Linearization)
        {
            <li>@item.Name</li>
        }
    </ol>
}
else
{
    <span style="color: red">Linearization is not possible.</span>
}

@code {
    private ElementReference _inheritanceGraph;
    
    protected override async Task OnInitializedAsync()
    {
        var diagramModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/diagrams.js");
        var diagram = "";
        await diagramModule.InvokeVoidAsync("renderDot", diagram, _inheritanceGraph);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender) return;
        classListUpdateService.CodeChangedEvent += UpdateGraph;
    }
}