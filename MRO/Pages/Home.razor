@inject UpdateService updateService;
@page "/"
@using System.Text.RegularExpressions
@using MRO.Models
@using MRO.Services

<PageTitle>Home</PageTitle>

<h1>Python MRO demonstration</h1>

<p>
    Python, like all object-oriented languages, allows users to define inheritance relationships between classes.
    This brings up some problems we have to solve, most notably: When more than 1 class in an inheritance hierarchy defines a method,
    which version of the method is called? The answer to this is to linearly order the class hierarchy and search each class
    in sequence. The order we apply is called the <i>method resolution order</i>, or MRO for short.
</p>

<p>
    To start exploring, define a class in the text box below.
</p>

<div style="display: flex">
    <div style="flex: 1">
        <StandaloneCodeEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="OnTextChangedAsync" OnDidInit="OnInitDoneAsync"></StandaloneCodeEditor>
    </div>
    <div style="width: 10vw"></div>
    <div style="width: 40vw">
        <ClassHierarchy></ClassHierarchy>
    </div>
</div>

@code
{
    
    private StandaloneCodeEditor _editor = null!;
    
    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "python",
            Theme = "vs-dark",
            Value = "# This is a code editor. Add some classes here to get started. \n" +
                    "# E.G.\n" +
                    "class A:\n" +
                    "    pass\n" +
                    "class B(A):\n" +
                    "    pass\n" + 
                    "class C(B,A):\n"+
                    "    pass\n" +
                    "# Did you know Python will show the MRO for any object? \n# Go to a python console and try: int.__mro__"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            var editorText = await _editor.GetValue();
            updateService.UpdateClassList(ParseClasses(editorText));
        }
            
    }

    private async void OnTextChangedAsync(ModelContentChangedEvent obj)
    {
        var editorText = await _editor.GetValue();
        updateService.UpdateClassList(ParseClasses(editorText));
    }

    private async void OnInitDoneAsync()
    {
        var editorText = await _editor.GetValue();
        updateService.UpdateClassList(ParseClasses(editorText));
    }

    private static List<PythonClass> ParseClasses(string editorText)
    {
        var classDefs = editorText.Split("\n").Where(line => line.StartsWith("class")).ToList();
        var pythonClasses = new List<PythonClass>(classDefs.Count);
        foreach (var classDef in classDefs)
        {
            List<PythonClass> superClasses = [];
            var className = Regex.Replace(classDef, @"class +([\w]*).*", "$1");
            if (Regex.IsMatch(classDef,@"class.*\((.*)\):"))
            {
                var superClassNames = Regex.Replace(classDef, @"class.*\((.*)\):", "$1")
                    .Split(",")
                    .Select(s => s.Trim())
                    .ToList();
                superClasses = new List<PythonClass>(superClassNames.Count);
                if (pythonClasses.Count == 0 && superClasses.Count > 0)
                    return [];
                foreach (var superClassName in superClassNames)
                {
                    //If the class is defined before its parents, this is an error
                    if (pythonClasses.All(c => c.Name != superClassName))
                    {
                        return [];
                    }

                    var superClass = pythonClasses.First(c => c.Name == superClassName);
                    superClasses.Add(superClass);
                }
            }
            
            //If the class has already been defined, we are re-defining it, which is an error
            if (pythonClasses.Any(c => c.Name == className))
                return [];
            pythonClasses.Add(new PythonClass(className, superClasses));
        }

        return pythonClasses;
    }
}
